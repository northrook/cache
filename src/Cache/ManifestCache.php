<?php

namespace Northrook\Cache;

use Northrook\CacheManager;
use Symfony\Component\Filesystem\Exception\IOException;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\VarExporter\Exception\ExceptionInterface;
use Symfony\Component\VarExporter\VarExporter;
use function Northrook\Core\Functions\hashKey;

final readonly class ManifestCache
{
    private mixed  $manifest;
    private string $cachePath;

    public function __construct(
        private string $name,
        private bool   $readOnly = false,
    ) {
        $this->cachePath = ManifestCache::path( $name );
    }

    private static function path( string $name ) : string {
        return CacheManager::setting( 'manifest.dir') . $name . '.manifest';
    }

    /**
     * @param mixed  $manifest     The manifest to store
     * @param bool   $canGenerate  [optional] Defaults to `!$this->readOnly`.
     *
     * @throws \RuntimeException
     * @throws \InvalidArgumentException
     * @throws IOException
     */
    public function set( mixed $manifest, ?bool $canGenerate = null ) : void {

        $canGenerate ??= !$this->readOnly;

        if ( !$canGenerate ) {
            throw new \RuntimeException( "Manifest generation is disabled by the constructor." );
        }

        $hash      = hashKey( $manifest );
        $generated = new Timestamp();

        $generator = $this::class;

        try {
            $manifest = VarExporter::export(
                [
                    'name'      => $this->name,
                    'hash'      => $hash,
                    'generated' => $generated->datetime,
                    'timestamp' => $generated->timestamp,
                    'manifest'  => $manifest,
                ],
            );
        }
        catch ( ExceptionInterface $exception ) {
            throw new \InvalidArgumentException(
                message  : "Unable to export the $this->name manifest.",
                code     : 500,
                previous : $exception,
            );
        }

        $content = <<<PHP
            <?php // $hash

            /*---------------------------------------------------------------------
            
                Name:      $this->name
                Generated: $generated->datetime
                Generator: $generator

                This file is automatically generated by ManifestCache.

                Do not edit it manually.

                See https://github.com/northrook/core for more information.

            ---------------------------------------------------------------------*/

            return $manifest;
            PHP;

        ( new Filesystem() )->dumpFile( $this->cachePath, $content );
    }

    public static function get( string $manifest ) : mixed {
        return ( new ManifestCache( $manifest, readOnly : true ) )->getManifest();
    }

    public function getManifest(
        bool $validate = true,
        bool $returnRaw = false,
    ) : mixed {

        if ( $returnRaw ) {
            return $this->loadManifest( $this->cachePath );
        }

        if ( isset( $this->manifest ) ) {
            return $this->manifest;
        }

        $manifestData = $this->loadManifest( $this->cachePath );

        if ( $manifestData === null ) {
            return null;
        }

        if ( $validate && $this->validate( $manifestData ) === false ) {
            throw new \RuntimeException(
                "Manifest $this->name is invalid.\n\nHash mismatch.\n\nPlease regenerate the manifest.\n\n$this->cachePath",
            );
        }

        return $this->manifest = $manifestData[ 'manifest' ];
    }

    /**
     * Loads the manifest from disk.
     *
     * - Stored in OPCache.
     * - Return `null` if not found.
     *
     * @param string  $path
     *
     * @return mixed
     */
    private function loadManifest( string $path ) : mixed {
        return file_exists( $path ) ? require $path : null;
    }

    /**
     * Validate the manifest hash against the stored hash.
     *
     * @param mixed  $manifestData
     *
     * @return bool
     */
    private function validate( mixed $manifestData ) : bool {
        return $manifestData[ 'hash' ] === hashKey( $manifestData[ 'manifest' ] );
    }
}