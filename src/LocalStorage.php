<?php

declare(strict_types=1);

namespace Cache;

use LogicException;
use Support\{Time};
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\VarExporter\Exception\ExceptionInterface;
use Symfony\Component\VarExporter\VarExporter;
use InvalidArgumentException;
use Throwable;

final class LocalStorage
{
    /** @var array<string, mixed> */
    private array $data;

    protected bool $locked = true;

    public readonly string $name;

    public readonly string $generator;

    public function __construct(
        private readonly string $filePath,
        ?string                 $name = null,
        ?string                 $generator = null,
        protected bool          $autosave = true,
        protected bool          $validate = false,
    ) {
        $this->name      = $name      ?? \basename( $this->filePath );
        $this->generator = $generator ?? $this::class;
    }

    public function __destruct()
    {
        if ( $this->autosave && ! empty( $this->data ) ) {
            $this->save();
        }
    }

    public function get(
        string    $key,
        ?callable $callback = null,
        mixed     $fallback = null,
    ) : mixed {
        if ( $this->has( $key ) ) {
            return $this->data[$key];
        }

        if ( \is_callable( $callback ) ) {
            $callback = $callback();
        }

        if ( ! $callback ) {
            return $fallback;
        }

        $this->set( $key, $callback );

        return $this->data[$key] ?? new LogicException();
    }

    /**
     * Set the {@see \Cache\LocalStorage::$data}.
     *
     * ⚠️ Overrides the current data.
     *
     * @param array<string, mixed> $data
     * @param bool                 $areYouSure
     *
     * @return void
     */
    public function setData( array $data, bool $areYouSure = false ) : void
    {
        if ( $areYouSure ) {
            \assert(
                // @phpstan-ignore-next-line
                empty( \array_filter( \array_keys( $data ), fn( $v ) => ! \is_string( $v ) ) ),
                $this->generator.' only accepts string keys.',
            );

            $this->data   = $data;
            $this->locked = false;
        }

        throw new LogicException( 'Please read the '.__METHOD__.' comment before replacing the data array.' );
    }

    /**
     * Merge with the current the {@see \Cache\LocalStorage::$data}.
     *
     * @param array<string, mixed> $data
     * @param bool                 $recursive
     *
     * @return void
     */
    public function addData( array $data, bool $recursive = false ) : void
    {
        \assert(
            // @phpstan-ignore-next-line
            empty( \array_filter( \array_keys( $data ), fn( $v ) => ! \is_string( $v ) ) ),
            $this->generator.' only accepts string keys.',
        );

        if ( $recursive ) {
            $this->data = \array_merge_recursive( $this->data, $data );
        }
        else {
            $this->data = \array_merge( $this->data, $data );
        }

        $this->locked = false;
    }

    public function add( string $key, mixed $value ) : void
    {
        if ( $this->has( $key ) ) {
            return;
        }
        $this->data[$key] = $value;
        $this->locked     = false;
    }

    public function set( string $key, mixed $value ) : void
    {
        $this->data[$key] = $value;
        $this->locked     = false;
    }

    public function has( string $key ) : bool
    {
        return \array_key_exists( $key, $this->getData() );
    }

    public function delete( string $key ) : bool
    {
        if ( ! isset( $this->data ) ) {
            $this->initialize();
        }

        return true;
    }

    /**
     * @return string[]
     */
    public function getKeys() : array
    {
        return \array_keys( $this->getData() );
    }

    /**
     * @return array<string, mixed>
     */
    public function getAll() : array
    {
        return $this->getData();
    }

    final public function save() : bool
    {
        if ( empty( $this->data ) || $this->locked ) {
            return false;
        }

        // Prevent changes to the $data until we're done saving
        $this->locked = true;

        try {
            $dataExport = VarExporter::export( $this->data );
        }
        catch ( ExceptionInterface $e ) {
            throw new InvalidArgumentException( $e->getMessage(), $e->getCode(), $e );
        }

        $storageDataHash = \hash( algo : 'xxh3', data : $dataExport );
        $generated       = new Time();
        $timestamp       = $generated->unixTimestamp;
        $date            = $generated->datetime;

        $localStorage = <<<PHP
            <?php
            
            /*--------------------------------------------------------{$timestamp}-
            
               Name      : {$this->name}
               Generated : {$date}
            
               This file is generated by {$this->generator}.
            
               Do not edit it manually.
            
            -{$storageDataHash}--------------------------------------------------*/
            
            return {$dataExport};

            PHP;

        try {
            ( new Filesystem() )->dumpFile( $this->filePath, $localStorage );
        }
        catch ( Throwable $e ) {
            throw new LogicException( $e->getMessage(), $e->getCode(), $e );
        }

        return true;
    }

    /**
     * @return array<string, mixed>
     */
    private function getData() : array
    {
        if ( ! isset( $this->data ) ) {
            $this->initialize();
        }

        return $this->data;
    }

    private function initialize() : void
    {
        if ( ! \file_exists( $this->filePath ) ) {
            $this->data = [];
            return;
        }

        try {
            $this->data = include $this->filePath;
        }
        catch ( ExceptionInterface $e ) {
            throw new InvalidArgumentException( $e->getMessage(), $e->getCode(), $e );
        }
    }
}
